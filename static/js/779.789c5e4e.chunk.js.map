{"version":3,"file":"static/js/779.789c5e4e.chunk.js","mappings":"yTAEaA,E,QAAcC,GAAAA,GAAH,iK,SC+DxB,EAvDgB,WACd,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAwCF,EAAAA,EAAAA,WAAS,GAAjD,eAAOG,EAAP,KAAqBC,EAArB,KAEMC,GAASC,EAAAA,EAAAA,MAef,OAbAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,8GAESC,EAAAA,EAAAA,IAAgB,GAAD,OAAIJ,EAAOK,KAFnC,OAGkB,KAD1BC,EAFQ,QAGDC,QAAQC,QAAcT,GAAgB,GACnDF,EAAWS,EAASC,SAJN,gDAMdE,QAAQC,MAAM,uBAAd,MANc,yDAAH,qDASfP,GACD,GAAE,CAACH,EAAOK,MAGT,SAACZ,EAAD,UACGK,GACC,uBAAG,4CAEHF,EAAQe,KAAI,SAAAC,GAAE,OACZ,UAACC,EAAA,GAAD,CAAUC,WAAW,aAArB,WACE,SAACC,EAAA,EAAD,WACE,SAACC,EAAA,EAAD,CACEC,IAAG,UAAKL,EAAGM,QACXC,IAAG,0CAAqCP,EAAGQ,eAAeC,kBAG9D,SAACC,EAAA,EAAD,CACEC,QAAO,UAAKX,EAAGM,QACfM,WACE,UAAC,WAAD,YACE,SAACC,EAAA,EAAD,CACEC,GAAI,CAAEC,QAAS,UACfC,UAAU,OACVC,QAAQ,QACRC,MAAM,eAJR,0BAMalB,EAAGQ,eAAeW,OAN/B,YAQCnB,EAAGoB,eAnB2BpB,EAAGP,GAD9B,KA6BrB,C,2NC7DK4B,EAAW,gCACXC,EACM,mBADNA,EAEI,eAFJA,EAGK,QAELC,EAAO,mCAEAC,EAAiB,mCAAG,uGACxBC,EAAAA,EAAAA,IAAA,UACGJ,GADH,OACcC,EADd,oBAC4CC,IAChDG,MAAK,SAAAC,GAAI,OAAIA,EAAKC,KAAKjC,OAAd,KAHmB,2CAAH,qDAMjBkC,EAAY,mCAAG,WAAMC,GAAN,0FACnBL,EAAAA,EAAAA,IAAA,UACGJ,GADH,OACcC,EADd,kBACwCQ,EADxC,oBACyDP,IAC7DG,MAAK,SAAAC,GAAI,OAAIA,EAAKC,IAAT,KAHc,2CAAH,sDAMZG,EAAe,mCAAG,WAAMtC,GAAN,0FACtBgC,EAAAA,EAAAA,IAAA,UACGJ,GADH,OACcC,EADd,YACmC7B,EADnC,oBACiD8B,IACrDG,MAAK,SAAAC,GAAI,OAAIA,EAAKC,IAAT,KAHiB,2CAAH,sDAMfI,EAAe,mCAAG,WAAMvC,GAAN,0FACtBgC,EAAAA,EAAAA,IAAA,UACGJ,GADH,OACcC,EADd,YACmC7B,EADnC,4BACyD8B,IAC7DG,MAAK,SAAAC,GAAI,OAAIA,EAAKC,IAAT,KAHiB,2CAAH,sDAMfpC,EAAe,mCAAG,WAAMC,GAAN,0FACtBgC,EAAAA,EAAAA,IAAA,UACGJ,GADH,OACcC,EADd,YACmC7B,EADnC,4BACyD8B,IAC7DG,MAAK,SAAAC,GAAI,OAAIA,EAAKC,IAAT,KAHiB,2CAAH,sDAMfK,EAAiB,mCAAG,WAAMH,GAAN,0FACxBL,EAAAA,EAAAA,IAAA,UACGJ,GADH,OACcC,EADd,kBACwCQ,EADxC,oBACyDP,IAC7DG,MAAK,SAAAC,GAAI,OAAIA,EAAKC,KAAKjC,QAAQ,EAAtB,KAHmB,2CAAH,qD","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","services/tmdbAPI.js"],"sourcesContent":["import styled from \"styled-components\"\n\nexport const ListReviews = styled.ul`\n  display: flex;\n    flex-wrap: wrap;\n    max-width: 100%;\n    align-items: center;\n    justify-content: center;\n    & li {\n    }\n`","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from 'services/tmdbAPI';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\nimport Typography from '@mui/material/Typography';\nimport { ListReviews } from './Reviews.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [notFoundText, setNotFoundText] = useState(false);\n\n  const params = useParams();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await getMovieReviews(`${params.id}`);\n        if (response.results.length === 0) setNotFoundText(true);\n        setReviews(response.results);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, [params.id]);\n\n  return (\n    <ListReviews>\n      {notFoundText ? (\n        <p>We don`t have any review for this movie</p>\n      ) : (\n        reviews.map(el => (\n          <ListItem alignItems=\"flex-start\" key={el.id}>\n            <ListItemAvatar>\n              <Avatar\n                alt={`${el.author}`}\n                src={`https://image.tmdb.org/t/p/w200/${el.author_details.avatar_path}`}\n              />\n            </ListItemAvatar>\n            <ListItemText\n              primary={`${el.author}`}\n              secondary={\n                <React.Fragment>\n                  <Typography\n                    sx={{ display: 'inline' }}\n                    component=\"span\"\n                    variant=\"body2\"\n                    color=\"text.primary\"\n                  >\n                    {`Grade: ${el.author_details.rating}/10.  `}\n                  </Typography>\n                  {el.content}\n                </React.Fragment>\n              }\n            />\n          </ListItem>\n        ))\n      )}\n    </ListReviews>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst END_POINT = {\n  trending: 'trending/all/day',\n  search: 'search/movie',\n  details: 'movie',\n};\nconst API_KEY = `410fd68cb4c9784c1149ddbecbed6a6d`;\n\nexport const getTrendingMovies = async () => {\n  return axios\n    .get(`${BASE_URL}${END_POINT.trending}?api_key=${API_KEY}`)\n    .then(resp => resp.data.results);\n};\n\nexport const searchMovies = async query => {\n  return axios\n    .get(`${BASE_URL}${END_POINT.search}?query=${query}&api_key=${API_KEY}`)\n    .then(resp => resp.data);\n};\n\nexport const getMovieDetails = async id => {\n  return axios\n    .get(`${BASE_URL}${END_POINT.details}/${id}?api_key=${API_KEY}`)\n    .then(resp => resp.data);\n};\n\nexport const getMovieCredits = async id => {\n  return axios\n    .get(`${BASE_URL}${END_POINT.details}/${id}/credits?api_key=${API_KEY}`)\n    .then(resp => resp.data);\n};\n\nexport const getMovieReviews = async id => {\n  return axios\n    .get(`${BASE_URL}${END_POINT.details}/${id}/reviews?api_key=${API_KEY}`)\n    .then(resp => resp.data);\n};\n\nexport const recommendedMovies = async query => {\n  return axios\n    .get(`${BASE_URL}${END_POINT.search}?query=${query}&api_key=${API_KEY}`)\n    .then(resp => resp.data.results[0]);\n};\n"],"names":["ListReviews","styled","useState","reviews","setReviews","notFoundText","setNotFoundText","params","useParams","useEffect","fetchData","getMovieReviews","id","response","results","length","console","error","map","el","ListItem","alignItems","ListItemAvatar","Avatar","alt","author","src","author_details","avatar_path","ListItemText","primary","secondary","Typography","sx","display","component","variant","color","rating","content","BASE_URL","END_POINT","API_KEY","getTrendingMovies","axios","then","resp","data","searchMovies","query","getMovieDetails","getMovieCredits","recommendedMovies"],"sourceRoot":""}