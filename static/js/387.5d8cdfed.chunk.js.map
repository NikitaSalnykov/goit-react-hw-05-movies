{"version":3,"file":"static/js/387.5d8cdfed.chunk.js","mappings":"yTAEaA,E,QAAWC,GAAAA,GAAH,oL,SC6DrB,EArDa,WACX,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACMC,GAASC,EAAAA,EAAAA,MACf,GAAwCJ,EAAAA,EAAAA,WAAS,GAAjD,eAAOK,EAAP,KAAqBC,EAArB,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,8GAESC,EAAAA,EAAAA,IAAgB,GAAD,OAAIN,EAAOO,KAFnC,OAGe,KADvBC,EAFQ,QAGDV,KAAKW,QAAcN,GAAgB,GAChDJ,EAAQS,EAASV,MAJH,gDAMdY,QAAQC,MAAM,uBAAd,MANc,yDAAH,qDASfN,GACD,GAAE,CAACL,EAAOO,MAGT,SAACZ,EAAD,UACGO,GACC,uBAAG,4DAEHJ,EAAKc,KAAI,SAAAC,GAAE,OACT,UAACC,EAAA,GAAD,CAAUC,WAAW,aAArB,WACE,SAACC,EAAA,EAAD,WACE,SAACC,EAAA,EAAD,CACEC,IAAG,UAAKL,EAAGM,MACXC,IAAG,0CAAqCP,EAAGQ,mBAG/C,SAACC,EAAA,EAAD,CACEC,QAAO,UAAKV,EAAGM,MACfK,WACE,SAAC,WAAD,WACE,SAACC,EAAA,EAAD,CACEC,GAAI,CAAEC,QAAS,UACfC,UAAU,OACVC,QAAQ,QACRC,MAAM,eAJR,SAMGjB,EAAGkB,kBAjByBlB,EAAGN,GADjC,KA4BlB,C,mMC3DKyB,EAAW,gCACXC,EACM,mBADNA,EAEI,eAFJA,EAGK,QAELC,EAAO,mCAEAC,EAAiB,mCAAG,uGACxBC,EAAAA,EAAAA,IAAA,UAAaJ,GAAb,OAAwBC,EAAxB,oBAAsDC,IAAWG,MAAK,SAAAC,GAAI,OAAEA,EAAKC,KAAKC,OAAZ,KADlD,2CAAH,qDAIjBC,EAAY,mCAAI,WAAOC,GAAP,0FACpBN,EAAAA,EAAAA,IAAA,UAAaJ,GAAb,OAAwBC,EAAxB,kBAAkDS,EAAlD,oBAAmER,IAAWG,MAAK,SAAAC,GAAI,OAAEA,EAAKC,IAAP,KADnE,2CAAJ,sDAIZI,EAAe,mCAAG,WAAOpC,GAAP,0FACtB6B,EAAAA,EAAAA,IAAA,UAAaJ,GAAb,OAAwBC,EAAxB,YAA6C1B,EAA7C,oBAA2D2B,IAAWG,MAAK,SAAAC,GAAI,OAAEA,EAAKC,IAAP,KADzD,2CAAH,sDAIfjC,EAAe,mCAAI,WAAOC,GAAP,0FACvB6B,EAAAA,EAAAA,IAAA,UAAaJ,GAAb,OAAwBC,EAAxB,YAA6C1B,EAA7C,4BAAmE2B,IAAWG,MAAK,SAAAC,GAAI,OAAEA,EAAKC,IAAP,KADhE,2CAAJ,sDAIfK,EAAe,mCAAI,WAAOrC,GAAP,0FACvB6B,EAAAA,EAAAA,IAAA,UAAaJ,GAAb,OAAwBC,EAAxB,YAA6C1B,EAA7C,4BAAmE2B,IAAWG,MAAK,SAAAC,GAAI,OAAEA,EAAKC,IAAP,KADhE,2CAAJ,qD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/tmdbAPI.js"],"sourcesContent":["import styled from \"styled-components\"\n\nexport const ListCast = styled.ul`\n  display: flex;\n    flex-wrap: wrap;\n    max-width: 100%;\n    align-items: center;\n    justify-content: center;\n    & li {\nmax-width: 212px;\n    }\n`","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCredits } from 'services/tmdbAPI';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\nimport Typography from '@mui/material/Typography';\nimport { ListCast } from './Cast.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const params = useParams();\n  const [notFoundText, setNotFoundText] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await getMovieCredits(`${params.id}`);\n        if (response.cast.length === 0) setNotFoundText(true);\n        setCast(response.cast);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, [params.id]);\n\n  return (\n    <ListCast>\n      {notFoundText ? (\n        <p>We don`t have any information about cast for this movie</p>\n      ) : (\n        cast.map(el => (\n          <ListItem alignItems=\"flex-start\" key={el.id}>\n            <ListItemAvatar>\n              <Avatar\n                alt={`${el.name}`}\n                src={`https://image.tmdb.org/t/p/w200/${el.profile_path}`}\n              />\n            </ListItemAvatar>\n            <ListItemText\n              primary={`${el.name}`}\n              secondary={\n                <React.Fragment>\n                  <Typography\n                    sx={{ display: 'inline' }}\n                    component=\"span\"\n                    variant=\"body2\"\n                    color=\"text.primary\"\n                  >\n                    {el.character}\n                  </Typography>\n                </React.Fragment>\n              }\n            />\n          </ListItem>\n        ))\n      )}\n    </ListCast>\n  );\n};\n\nexport default Cast;\n","import axios from \"axios\";\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst END_POINT = {\n  trending: 'trending/all/day',\n  search: 'search/movie',\n  details: 'movie',\n}\nconst API_KEY = `410fd68cb4c9784c1149ddbecbed6a6d`;\n\nexport const getTrendingMovies = async () => {\n  return axios.get(`${BASE_URL}${END_POINT.trending}?api_key=${API_KEY}`).then(resp=>resp.data.results)\n}\n  \nexport const searchMovies  = async (query) => {\n  return axios.get(`${BASE_URL}${END_POINT.search}?query=${query}&api_key=${API_KEY}`).then(resp=>resp.data)\n  }\n  \nexport const getMovieDetails = async (id) => {\n  return axios.get(`${BASE_URL}${END_POINT.details}/${id}?api_key=${API_KEY}`).then(resp=>resp.data)\n  }\n  \nexport const getMovieCredits  = async (id) => {\n  return axios.get(`${BASE_URL}${END_POINT.details}/${id}/credits?api_key=${API_KEY}`).then(resp=>resp.data)\n  }\n  \nexport const getMovieReviews  = async (id) => {\n  return axios.get(`${BASE_URL}${END_POINT.details}/${id}/reviews?api_key=${API_KEY}`).then(resp=>resp.data)\n  }\n\n"],"names":["ListCast","styled","useState","cast","setCast","params","useParams","notFoundText","setNotFoundText","useEffect","fetchData","getMovieCredits","id","response","length","console","error","map","el","ListItem","alignItems","ListItemAvatar","Avatar","alt","name","src","profile_path","ListItemText","primary","secondary","Typography","sx","display","component","variant","color","character","BASE_URL","END_POINT","API_KEY","getTrendingMovies","axios","then","resp","data","results","searchMovies","query","getMovieDetails","getMovieReviews"],"sourceRoot":""}